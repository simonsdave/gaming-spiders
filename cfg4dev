configure_dev_env()
{
    if [ ! -f "$PWD/requirements.txt" ]; then
        echo "Must source this script from project's root directory" >&2
        return 1
    fi

    if [ -d "$PWD/env" ]; then
        source "$PWD/env/bin/activate"
    else
        virtualenv env
        source "$PWD/env/bin/activate"

        #
        # pip & setuptools install is here to fix the problem
        # introduced with setuptools v34 and described well
        # in this bug
        #
        #   https://github.com/pypa/setuptools/issues/942
        #
        pip install -U pip
        pip install setuptools==33.1.1

        pip install --requirement "$PWD/requirements.txt"

        OSNAME=$(uname -s)
        case "$OSNAME" in
            Linux)
                CHROMEDRIVER_URL="http://chromedriver.storage.googleapis.com/2.27/chromedriver_linux64.zip"
                JQ_URL="https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64"
                ;;
            Darwin)
                CHROMEDRIVER_URL="http://chromedriver.storage.googleapis.com/2.27/chromedriver_mac32.zip"
                JQ_URL="https://github.com/stedolan/jq/releases/download/jq-1.5/jq-osx-amd64"
                ;;
            *)
                echo "Unsupported operating system '$OSNAME'" >&2
                return 1
                ;;
        esac

        curl -s --output chromedriver.zip $CHROMEDRIVER_URL
        unzip chromedriver.zip
        rm chromedriver.zip
        mv chromedriver "$PWD/env/bin/."

        curl -s -L --output jq "$JQ_URL"
        chmod u+x jq
        mv jq "$PWD/env/bin/."
    fi
    export PATH="$PWD/bin":$PATH
    export PYTHONPATH="$PWD"

    if [ "" != "`which Xvfb`" ]; then
        if [ "" == "$DISPLAY" ]; then
            export DISPLAY=:99
        fi
        if [ "0" == "`ps aux | grep \[X\]vfb | wc -l | sed -e "s/[[:space:]]//g"`" ]; then
            Xvfb $DISPLAY -ac -screen 0 1280x1024x24 >& /dev/null &
        fi
    fi

    return 0
}

configure_dev_env
